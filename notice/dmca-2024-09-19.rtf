{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 **Are you the copyright holder or authorized to act on the copyright owner's behalf?**\
\
Yes, I am authorized to act on the copyright owner's behalf.\
\
**Are you submitting a revised DMCA notice after GitHub Trust & Safety requested you make changes to your original notice?**\
\
Yes\
\
**Please provide the Zendesk ticket number of your previously submitted notice. Zendesk ticket numbers are 7 digit ID numbers located in the subject line or body of your confirmation email.**\
\
2909491\
\
**Does your claim involve content on GitHub or npm.js?**\
\
GitHub\
\
**Please describe the nature of your copyright ownership or authorization to act on the owner's behalf.**\
\
AppSealing is a leading mobile application security solution that provides comprehensive protection for mobile apps across various platforms, including banking, gaming, and OTT (over-the-top) services. Our technology utilizes advanced security measures to prevent reverse engineering, tampering, and unauthorized access, ensuring that sensitive data, transactions, and premium content remain secure.\
\
For example:\
\
Banking Apps: AppSealing safeguards financial data, preventing unauthorized transactions and data breaches.  \
Gaming Apps: It protects against hacking and cheating, maintaining a fair gaming environment.  \
OTT Apps: AppSealing ensures that premium content is protected from piracy and unauthorized distribution.  \
To protect these apps, AppSealing employs a variety of techniques, including:\
\
Code Obfuscation: Making the app's code difficult to understand and reverse engineer.  \
Runtime Protection: Detecting and preventing tampering or debugging in real-time.  \
Anti-Reverse Engineering: Using multiple layers of security to prevent decompiling and analysis.  \
Encryption: Securing sensitive data and communications within the app.  \
The repository at https://github.com/ARandomPerson7/Appsealing-Reversal is specifically designed to circumvent AppSealing\'92s protection mechanisms, compromising the security of the applications we protect. This repository provides tools and methods to reverse engineer and bypass our security features, exposing apps to significant risks such as data breaches, financial fraud, cheating, and piracy.\
\
Moreover, the repository at https://github.com/LEAGUE-OF-NINE/AppPealing was built based on the methods and tools provided in the [private] repository. This demonstrates a continued and deliberate effort to undermine AppSealing\'92s technology and compromise the security of protected apps.\
\
By violating AppSealing\'92s copyright and circumventing our protection mechanisms, these repositories not only infringe on our rights but also jeopardize the security and integrity of the applications we protect and clients applications who have implemented AppSealing. This notice is submitted in good faith, with a firm belief in the unauthorized nature of the material and its potential to cause harm.\
\
**Please provide a detailed description of the original copyrighted work that has allegedly been infringed. If possible, include a URL to where it is posted online.**\
\
The original copyrighted work is the proprietary security software developed by AppSealing (https://www.appsealing.com/). AppSealing provides advanced mobile application security solutions that protect apps from hacking, tampering, and unauthorized access. Our technology includes:\
\
Code Obfuscation: Making the app\'92s code difficult to understand and reverse engineer- Reference (https://www.appsealing.com/code-obfuscation/)  \
Runtime Protection: Detecting and preventing tampering or debugging in real-time.  \
Anti-Reverse Engineering: Adding multiple layers of security to prevent decompiling and analysis.  \
Encryption: Securing sensitive data and communications within the app.  \
These security measures are critical for protecting various types of apps, including banking apps, gaming apps, and OTT apps, ensuring the safety of financial transactions, gaming fairness, and protection of premium content from piracy.  \
Reference -(https://www.appsealing.com/the-essential-guide-to-preventing-mobile-app-repackaging/)  \
\
The infringing repository at [private] contains tools and methods specifically designed to bypass AppSealing\'92s security features, compromising the integrity of the protected applications. This repository describes users how to disable our security mechanisms, exposing millions of apps protected by our solution to risks like data breaches, financial fraud, cheating, and unauthorized content distribution.\
\
Furthermore, the repository at https://github.com/LEAGUE-OF-NINE/AppPealing was built using the methods provided in [private], illustrating a deliberate and ongoing effort to undermine AppSealing\'92s technology. This continued infringement not only violates our copyright but also significantly jeopardizes the security of the apps we protect.\
\
By providing these tools and methods, these repositories compromise the security and integrity of applications protected by AppSealing, causing potential harm to users and companies relying on our technology for protection.\
\
**What files should be taken down? Please provide URLs for each file, or if the entire repository, the repository\'92s URL.**\
\
The entire repositories listed below should be taken down due to their infringement on AppSealing\'92s copyrighted technology:\
\
Repository URL: [private]  \
Repository URL: https://github.com/LEAGUE-OF-NINE/AppPealing  \
These repositories contain tools and methods designed to bypass AppSealing\'92s security features, compromising the integrity and security of the applications we protect.\
\
**Do you claim to have any technological measures in place to control access to your copyrighted content? Please see our <a href="https://docs.github.com/articles/guide-to-submitting-a-dmca-takedown-notice#complaints-about-anti-circumvention-technology">Complaints about Anti-Circumvention Technology</a> if you are unsure.**\
\
Yes\
\
**What technological measures do you have in place and how do they effectively control access to your copyrighted material?**\
\
AppSealing employs a variety of advanced technological measures to protect and control access to our copyrighted material. These measures include:  \
1. Root and Jailbreak Detection : An AppSealing Potected application will be not allowed to run in root or jailbroken enviroment as it has super user level of access\
\
2. Protection Tampereing and Repackaging of Mobile Application both Android and iOS : An AppSealing Potected application will be Tamper and Repackaing proof where attackers or malicious user will not be able to tamper the application code and perform repackaging for bypassing premium subscriptions to generate modded or modified applications. Our technology adds multiple layers of security to prevent decompiling and analysis of the app\'92s code. This includes techniques such as code encryption and integrity checks to ensure that the app remains secure and unaltered.\
\
3. Maclious Package based detections to identify if there is any malicious application running with in the mobile device environment where the AppSealing Protected apps are deployed or installed.\
\
4. Code Encryption: This technique makes the app's code difficult to understand and reverse engineer. By transforming the original code into an encrypted version, it becomes nearly impossible for unauthorized parties to comprehend or manipulate the code.\
\
5.Real time-Runtime Protection: AppSealing includes real-time monitoring and protection mechanisms that detect and prevent tampering or debugging attempts while the app is running. This ensures that any unauthorized modification or analysis is immediately thwarted.\
\
So once the AppSealing protected application is installed the pirates/hackers/malicious user has to bypass the mentioned above controls to compromise the target application and the highlighted Github repositories describes users how to disable our above security mechanisms, exposing millions of apps protected by our solution to risks like data breaches, financial fraud, cheating, and unauthorized content distribution.\
\
Scenario Example  \
Consider a banking app protected by AppSealing. This app handles sensitive financial transactions and stores personal information of users. If a malicious actor uses the tools and methods provided in the repository at [private] to bypass AppSealing's protections, they can:\
\
Access Sensitive Data: By reverse engineering the app, the attacker could gain access to encrypted data, such as user passwords and bank account details.  \
Manipulate Transactions: The attacker could alter the app's code to perform unauthorized transactions, transferring money from user accounts without their knowledge.  \
Bypass Security Checks: Real-time protection and integrity checks could be disabled, allowing the attacker to modify the app\'92s behavior without detection.  \
This compromise not only results in financial loss for users but also damages the bank\'92s reputation and trust. By using AppSealing\'92s security measures, such threats are mitigated, ensuring that the banking app remains secure and trustworthy.\
\
By providing these tools and methods, the repositories compromise the security and integrity of applications protected by AppSealing, causing potential harm to users and developers relying on our technology for protection.\
\
**How is the accused project designed to circumvent your technological protection measures?**\
\
The accused projects, available at [private] and https://github.com/LEAGUE-OF-NINE/AppPealing are specifically designed to bypass AppSealing\'92s advanced security measures. It does this by providing tools and methods that:\
\
Reverse Engineer Code: The project includes techniques to decompile and analyze the app\'92s code, effectively undoing AppSealing\'92s code obfuscation. This allows the attacker to understand and manipulate the app\'92s code.\
\
Disable Runtime Protection: The tools provided can detect and disable AppSealing\'92s real-time monitoring and tampering detection features. This means that any modifications made to the app during its execution go unnoticed, compromising the app\'92s integrity.\
\
Break Anti-Reverse Engineering Measures: By circumventing the multiple layers of security designed to prevent decompiling, the project exposes the app\'92s underlying code and structure, making it vulnerable to further attacks.\
\
Decrypt Encrypted Data: The project include methods to bypass or break encryption, allowing attackers to access sensitive data that AppSealing\'92s encryption is supposed to protect.\
\
Scenario Example  \
Consider a banking app protected by AppSealing. This app handles sensitive financial transactions and stores personal information of users. If a malicious actor uses the tools and methods provided in the repository at [private] to bypass AppSealing's protections, they can:\
\
Access Sensitive Data: By reverse engineering the app, the attacker could gain access to encrypted data, such as user passwords and bank account details.  \
Manipulate Transactions: The attacker could alter the app's code to perform unauthorized transactions, transferring money from user accounts without their knowledge.  \
Bypass Security Checks: Real-time protection and integrity checks could be disabled, allowing the attacker to modify the app\'92s behavior without detection.  \
This compromise not only results in financial loss for users but also damages the bank\'92s reputation and trust. By using AppSealing\'92s security measures, such threats are mitigated, ensuring that the banking app remains secure and trustworthy.\
\
Additionally, the repository at https://github.com/LEAGUE-OF-NINE/AppPealing, built on the techniques from the first repository, illustrates a continued and deliberate effort to undermine AppSealing\'92s technology.\
\
By providing these tools and methods, these repositories compromise the security and integrity of applications protected by AppSealing, causing potential harm to users and developers relying on our technology for protection.\
\
Impact on AppSealing  \
The unauthorized use of our SEO keyword "The #1 App shielding solution" can significantly impact our business by:  \
Misleading Potential Clients: Users searching for our services may be misled into accessing the infringing repository, leading to confusion and potentially harming our reputation.  \
Damaging Brand Identity: The unauthorized use of our SEO keywords dilutes our brand identity, reducing the effectiveness of our marketing efforts and potentially leading to a loss of trust among clients.  \
Negative SEO Impact: The presence of infringing content using our SEO keywords can negatively impact our search engine rankings, making it harder for legitimate users to find our official content.\
\
By documenting and disseminating these methods, the accused project directly undermines the effectiveness of our technological protection measures, compromising the security of applications protected by AppSealing and violating our intellectual property rights.\
\
**<a href="https://docs.github.com/articles/dmca-takedown-policy#b-what-about-forks-or-whats-a-fork">Have you searched for any forks</a> of the allegedly infringing files or repositories? Each fork is a distinct repository and must be identified separately if you believe it is infringing and wish to have it taken down.**\
\
[private]  \
[private]  \
[private]  \
[private]  \
https://github.com/apkunpacker/AppPealing  \
https://github.com/CrackerCat/AppPealing  \
https://github.com/Familyye/AppPealing  \
https://github.com/jivanirutvik/AppPealing  \
[private]  \
https://github.com/MikaCybertron/AppPealing  \
https://github.com/RevealedSoulEven/AppPealing\
\
**Is the work licensed under an open source license?**\
\
No\
\
**What would be the best solution for the alleged infringement?**\
\
Reported content must be removed\
\
**Do you have the alleged infringer\'92s contact information? If so, please provide it.**\
\
Discord: [private]\
\
Email: [private]\
\
**I have a good faith belief that use of the copyrighted materials described above on the infringing web pages is not authorized by the copyright owner, or its agent, or the law.**\
\
**I have taken <a href="https://www.lumendatabase.org/topics/22">fair use</a> into consideration.**\
\
**I swear, under penalty of perjury, that the information in this notification is accurate and that I am the copyright owner, or am authorized to act on behalf of the owner, of an exclusive right that is allegedly infringed.**\
\
**I have read and understand GitHub's <a href="https://docs.github.com/articles/guide-to-submitting-a-dmca-takedown-notice/">Guide to Submitting a DMCA Takedown Notice</a>.**\
\
**So that we can get back to you, please provide either your telephone number or physical address.**\
\
Name: [private]  \
Designation: [private]  \
Mobile: [private]  \
Email ID: [private]  \
India Office / Product Team:  \
[private]  \
[private]\
\
**Please type your full legal name below to sign this request.**\
\
[private]}